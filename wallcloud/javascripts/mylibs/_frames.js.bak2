define(
	['jquery', '_filmstrip', '_placement', '_strokes'],
	function ($, filmstrip, placement, strokes) {

var frameIndex = 0,
	prevFrameIndex = 0,
	framect = 0,

	$main = $('#main'),
	$pageNumber = $('.page-number'),
	$prevbutton = $('#prevbutton'),
    $nextbutton = $('#nextbutton'),
    frameCatalog = [],
    reverse = 'false',

	$frameGroup,
	$frame,
	$frameElements;

	//--------------------------------------------------------
	// start and stop the embedded content
	//--------------------------------------------------------
	$.fn.startEmbeddedContent = function() {

		var frame = $(this);

		// frame.find( 'video, audio' ).each( function() {

		// 	if( this.hasAttribute( 'autoplay' ) ) {
		// 		this.play();
		// 		$(this).bind('ended', function(){
		// 			this.play();
		// 		});
		// 	}
		// } );

		// // YouTube embeds
		// frame.find( 'iframe[src*="youtube.com/embed/"]' ).each( function() {
		// 	if( this.hasAttribute( 'data-autoplay' ) ) {
		// 		this.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
		// 	}
		// });

		frame.find('.framewrap').each( function() {
			filmstrip.playFilmStrip(this);
		});

		return this;
	};


	$.fn.stopEmbeddedContent = function() {

		var frame = $(this);
		
		// frame.find( 'video, audio' ).each( function() {
		// 		this.pause();
		// });

		// // YouTube embeds
		// frame.find( 'iframe[src*="youtube.com/embed/"]' ).each( function() {
		// 	if( typeof this.contentWindow.postMessage === 'function' ) {
		// 		this.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
		// 	}
		// });

		frame.find('.framewrap').each( function() {
			filmstrip.stopFilmStrip(this);
		});

		return this;
	};


	return {
		//--------------------------------------------------------
		// Prepares the info about which frames elements are visible on each frame
		//--------------------------------------------------------

		prepareFrames: function(){

				$frameGroup = $(".frame-group");
				$frame = $frameGroup.children("li");
				$frameElements = $frameGroup.add($frame);


			//--------------------------------------------------------
			// add the duration info for each frame
			//--------------------------------------------------------

			// adds a "depth" to each frame element, reflects how deeply nested it is
			$frameElements.each(function() {
				$(this).data('depth', $(this).parents($frameElements).length);
			});

			// sorts based on depth
			$frameElements.get().sort(function(a, b) {
				var aD = jQuery.data(a, 'depth'),
				bD = jQuery.data(b, 'depth');

				if (aD < bD) { return -1; }
				if (aD === bD){ return 0;  }
				if (aD > bD) { return 1;  }

			});

			// inverts the order (so that it goes deepest â€“> least-deep)
			$($frameElements.get().reverse()).each(function() {

				var $this = $(this),
				$childrenDuration = 0,
				duration = 1,
				persist = $this.data('frame-persist') || 0,
				steps = $this.data('frame-steps') || 0,
				$children = $this.children($frameElements);

				if ($this.is( $frame )) {

					$children.each(function(){
						var $childDuration = $(this).data('duration');
						if ($childDuration > $childrenDuration) { $childrenDuration = $childDuration; }
					});

					if ($childrenDuration > 1) { $this.addClass('extra-frames'); }

				} else{ //if it's a frame-group

					$children.each(function(){
						$childrenDuration = $childrenDuration + $(this).data('duration');
					});
				}

				if (duration < $childrenDuration) {
					duration = $childrenDuration;
				}

				if (duration < steps) {
					duration = steps;
					$this.addClass('extra-frames');
				}
				
				$this.data('natural-duration', duration);
				$this.data('duration', (duration + persist));

			});

			//change the frame count to match new data
			framect = $main.data('duration');

			for(var i = 0; i < framect;) {
			        frameCatalog.push( [] );
						i++;
			      }


			//--------------------------------------------------------
			// add which frames each frame is visible on
			//--------------------------------------------------------

			$($frameElements).each(function(){
				var $this = $(this),
				end = $this.data('duration'),
				v = [],
				i = 0,
				firstFrame = 0,
				firstChild = 0;
				

				if ($this.is($frame)){
					var sibling = $this.prev($frame);
					if (sibling && sibling.data('visible-frames')) {
						sibling = sibling.data('visible-frames');
						firstFrame = sibling[sibling.length-1] + 1;
					} else {
						firstChild = true;
					}
				}

				if ($this.not($main).is($frameGroup) || firstChild){
					firstFrame = $this.parent().data('visible-frames')[0];
				}

					i = firstFrame;
					end = end + firstFrame;

					while (i < end){
						frameCatalog[i].push(this);
						v.push(i);
						i++;
					}

				$this.data('visible-frames', v);
			});

		},

		refreshPlacement: function(){
			placement.focalpointElems = $('.focalpoint');
			$frame.addClass('p-haslayout');
			placement.focalpoint(); 
			$frame.removeClass('p-haslayout');
		},

		addStrokes: function(){
			$frame.addClass('p-haslayout');
			strokes.stroke();
			$('.textBlock').addClass('ready');
			$frame.removeClass('p-haslayout');
		},


		hideNavNext: function() {$nextbutton.addClass('hidden');},
    	showNavNext: function() {$nextbutton.removeClass('hidden');},

    	hideNavPrev: function() {$prevbutton.addClass('hidden');},
    	showNavPrev: function() {$prevbutton.removeClass('hidden');},

    	hideNav: function() {$nextbutton.addClass('hidden'); $prevbutton.addClass('hidden');},
    	showNav: function() {$nextbutton.removeClass('hidden'); $prevbutton.removeClass('hidden');},


		//--------------------------------------------------------
		// actually changes the frame
		//--------------------------------------------------------

		changeFrame: function(value){
			reverse = false;
			prevFrameIndex = frameIndex;

		//change the frame index to the new value
			if (value==="next") { if (frameIndex < framect-1) frameIndex++; }
			else if (value==="prev") { if (frameIndex > 0) frameIndex--; reverse = true;}
			else if (value==="first") { frameIndex = 0; reverse = true;}
			else if (value==="last"){ frameIndex = framect - 1; }
			else { frameIndex = Math.max(0, Math.min(framect - 1, parseInt(value, 10))); }

			var $visibleFrames = $(frameCatalog[frameIndex]).filter($frame);

			if (frameIndex < framect-1 && frameIndex > 0){
				$adjacentFrames = $(frameCatalog[frameIndex-1]).add($(frameCatalog[frameIndex+1]));
			} else if (frameIndex < framect-1){
				$adjacentFrames = $(frameCatalog[frameIndex-1]);
			} else {
				$adjacentFrames = $(frameCatalog[frameIndex+1]);
			}





			if (prevFrameIndex === frameIndex) {
				$visibleFrames.addClass('current');
			} else {

				$visibleFrames.filter(function() { return $(this).data('duration') > 1; }).each(function(){
					var $this = $(this),
					possibleFrames = $this.data('visible-frames'),
					currentFrame,
					classes;

					if ( frameIndex >= possibleFrames[0] && frameIndex <= possibleFrames[possibleFrames.length - 1] ){
						currentFrame = 'f-' + (frameIndex - possibleFrames[0] + 1);
					 
						//gathers classes, removes old "f-" classes, adds new "f-" class
						classes = $this.attr("class").split(" ").filter(function(item) {
							return item.indexOf("f-") === -1 ? item : "";
						});

						$this.attr("class", classes.join(" ")).addClass(currentFrame); 

					}

				});

				$frame.removeClass('reverse before-animation previous');

			var $prevFrames = $(frameCatalog[prevFrameIndex]).filter($frame),
				$oldFrames = $prevFrames.not($visibleFrames),
				$newFrames = $visibleFrames.not($prevFrames);


				if (reverse) { 
					$oldFrames.removeClass('current').addClass('previous before-animation reverse');
					$newFrames.addClass('current before-animation reverse');
				} else {
					$oldFrames.removeClass('current').addClass('previous before-animation');
					$newFrames.addClass('current before-animation');
				}

				window.setTimeout(function(){
					$oldFrames.add($newFrames).removeClass('before-animation');
				}, 50);
			}

			$adjacentFrames.addClass('adjacent');


				




			//show/hide nav buttons
			if (frameIndex===0) { this.hideNavPrev(); this.showNavNext();}
			else if (frameIndex===framect-1) { this.hideNavNext(); this.showNavPrev();}
			else{this.showNav();};

			if ($pageNumber) {
				$pageNumber.text( (frameIndex+1) + "/" + (framect));
			};

		}

	};

});